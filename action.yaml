name: 'Xquare deployment'
author: 'Xquare'
branding:
  icon: 'Xquare'
  color: 'Purple'

description: 'Tasks to deploy to xquare server'
inputs:
  service_type:
    description: 'Type of project (ex. be, fe)'
    required: true
  environment:
    description: 'Environment classification for servers (prod/stag)' 
    required: true
  config_file_path:
    description: 'Path of Xquare Config file'
    default: '.xquare/config.yaml'
  xquare_role_arn:
    description: 'Role arn to assume xquare credentials. If you want to distribute to Xquare, please contact administrator and check the value.'
    required: true
  gitops_deploy_token:
    description: 'GitOps deploy token to repository dispatch, set this as your `secrets.GITOPS_DEPLOY_TOKEN`' 
    required: true

runs:
  using: 'composite'
  steps:

    - name: Check config values and set environment values
      id: check-config
      shell: bash
      run: $GITHUB_ACTION_PATH/check_config.sh > config.yaml
        CONFIG_FILE_PATH: ${{ inputs.config_file_path }}
        TARGET_BANCH: ${{ GITHUB_REF#refs/heads/ }}
        GIT_URL: ${{ $GITHUB_SERVER_URL }}/${{ $GITHUB_REPOSITORY }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.xquare_role_arn }}
        aws-region: ap-northeast-2

    - name: Get Secrets
      uses: aws-actions/aws-secretsmanager-get-secrets@v1
      with:
        secret-ids:
          xquare/cloud-config
        parse-json-secrets: true

    - name: Get the tag if exist
      id: tag
      shell: bash
      run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo ::set-output name=version_tag::$(echo $GITHUB_REF | cut -d / -f 3)
          else
            echo ::set-output name=version_tag::${{ github.sha }}
          fi

    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker Build and push
      id: docker
      shell: bash
      run: |
        repo="${{ steps.ecr.outputs.registry }}:${{ steps.tag.outputs.version_tag }}"
        docker build -t $repo \
          --build-arg CLOUD_CONFIG_USERNAME=${{ env.XQUARE_CLOUD_CONFIG_USERNAME }} \
          --build-arg CLOUD_CONFIG_PASSWORD=${{ env.XQUARE_CLOUD_CONFIG_PASSWORD }} \
          --build-arg PROFILE=${{ inputs.environment }} .
        docker push $repo

    - name: Read config file
      id: read-config
      run: |
        config=$(cat ${{ inputs.config_file_path }})
        echo "::set-output name=service_name::$(echo $config | yq e 'config.name' -)
        echo "::set-output name=service_prefix::$(echo $config | yq e 'config.prefix' -)

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ inputs.gitops_deploy_token }}
        repository: team-xquare/xquare-gitops-repo
        event-type: update_image
        client-payload: |
          '{
            "ref" : "${{ github.ref }}", 
            "version" : "${{ steps.get_tag.outputs.version_tag }}",
            "service_name" : "${{ steps.read-config.outputs.service_name }}",
            "service_prefix" : "${{ steps.read-config.outputs.service_prefix }}",
            "service_type" : "${{ inputs.service_type }}",
            "environment" : "${{ inputs.environment }}"
          }'