name: 'Xquare deployment'
author: 'Xquare'
branding:
  icon: 'Xquare'
  color: 'Purple'

description: 'Tasks to deploy to xquare server'
inputs:
  environment:
    description: 'Environment classification for servers (prod/stag)' 
    required: true
  config_file_path:
    description: 'Path of Xquare Config file'
    default: '.xquare/config.yaml'
  xquare_role_arn:
    description: 'Role arn to assume xquare credentials. If you want to distribute to Xquare, please contact administrator and check the value.'
    required: true
  github_token:
    description: 'Github personal access token to repository dispatch. It should has a `repo` scope. Detail on [Github Document](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)' 
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install yq
      uses: mikefarah/yq@v4

    - name: Check config values
      id: check-config
      shell: bash
      env:
        GIT_REPO: ${{ github.repository }}
        TARGET_BRANCH: ${{ github.ref }}
        CONFIG_FILE_PATH: ${{ inputs.config_file_path }}
      run: |
        chmod +x $GITHUB_ACTION_PATH/check_config.sh
        $GITHUB_ACTION_PATH/check_config.sh

    - name: Read config file
      id: read-config
      shell: bash
      run: |
        config=$(cat ${{ inputs.config_file_path }})
        echo "service_name=$(yq eval ".config.name" <<< "$config")" >> $GITHUB_OUTPUT
        echo "service_prefix=$(yq eval ".config.prefix" <<< "$config")" >> $GITHUB_OUTPUT
        echo "service_type=$(yq eval ".config.service_type" <<< "$config")" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.xquare_role_arn }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set ECR Repository name Env
      shell: bash
      run: echo "ECR_REPOSITORY_NAME=${{ steps.read-config.outputs.service_name }}-${{ steps.read-config.outputs.service_type }}-${{ inputs.environment }}" >> $GITHUB_ENV

    - name: Check if ECR repository exists
      shell: bash
      run: |
        set +e
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_NAME }}
        exit_code=$?
        set -e
        if [ $exit_code -ne 0 ]; then
          echo "ecr_exists=false" >> $GITHUB_ENV
        else
          echo "ecr_exists=true" >> $GITHUB_ENV
        fi

    - name: Create ECR repository if not exists
      if: env.ecr_exists == 'false'
      shell: bash
      run: |
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY_NAME }}

    - name: Terraform Repository Dispatch if not exists
      if: env.ecr_exists == 'false'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ inputs.github_token }}
        repository: team-xquare/xquare-infrastructure-global
        event-type: add_ecr
        client-payload: |
          {
            "repository_name" : "${{ env.ECR_REPOSITORY_NAME }}",
            "service_name" : "${{ steps.read-config.outputs.service_name }}",
            "service_type" : "${{ steps.read-config.outputs.service_type }}",
            "environment" : "${{ inputs.environment }}"
          }

    - name: Get the branch tag if exist
      id: tag
      shell: bash
      run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "version_tag=${{ inputs.environment }}-$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
          else
            echo "version_tag=${{ inputs.environment }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

    - name: Get Secrets
      uses: aws-actions/aws-secretsmanager-get-secrets@v1
      with:
        secret-ids:
          xquare/cloud-config
        parse-json-secrets: true

    - name: Docker Build and push
      id: docker
      shell: bash
      run: |
        repo="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ steps.tag.outputs.version_tag }}"
        docker build -t $repo \
          --build-arg CLOUD_CONFIG_USERNAME=${{ env.XQUARE_CLOUD_CONFIG_USERNAME }} \
          --build-arg CLOUD_CONFIG_PASSWORD=${{ env.XQUARE_CLOUD_CONFIG_PASSWORD }} \
          --build-arg PROFILE=${{ inputs.environment }} .
        docker push $repo

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ inputs.github_token }}
        repository: team-xquare/xquare-gitops-repo
        event-type: update_config
        client-payload: |
          {
            "ref" : "${{ github.ref }}", 
            "image_tag" : "${{ steps.tag.outputs.version_tag }}",
            "service_name" : "${{ steps.read-config.outputs.service_name }}",
            "service_prefix" : "${{ steps.read-config.outputs.service_prefix }}",
            "service_type" : "${{ steps.read-config.outputs.service_type }}",
            "environment" : "${{ inputs.environment }}"
          }