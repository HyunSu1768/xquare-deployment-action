name: 'Xquare deployment'
author: 'Xquare'
branding:
  icon: 'Xquare'
  color: 'Purple'

description: 'Tasks to deploy to xquare server'
inputs:
  environment:
    description: 'Environment classification for servers (prod/stag)' 
    required: true
  base_url:
    description: 'Base url of code'
    default: '.'
  config_file_path:
    description: 'Path of Xquare Config file'
    default: '.xquare/config.yaml'
  xquare_role_arn:
    description: 'Role arn to assume xquare credentials. If you want to distribute to Xquare, please contact administrator and check the value.'
    required: true
  github_token:
    description: 'Github personal access token to repository dispatch. It should has a `repo` scope. Detail on [Github Document](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)' 
    required: true
  buildargs:
    description: 'Use buildargs when you want to pass a list of environment variables to docker as build-args'

runs:
  using: 'composite'
  steps:
    # Config file
    - name: Install yq
      uses: mikefarah/yq@v4

    - name: Check and read config values
      id: read-config
      shell: bash
      env:
        GIT_REPO: ${{ github.repository }}
        TARGET_BRANCH: ${{ github.ref }}
        CONFIG_FILE_PATH: ${{ inputs.config_file_path }}
      run: |
        chmod +x $GITHUB_ACTION_PATH/check_config.sh
        $GITHUB_ACTION_PATH/check_config.sh

    # AWS Setting
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.xquare_role_arn }}
        aws-region: ap-northeast-2

    # ECR
    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get ECR Repository name
      id: repository
      shell: bash
      run: echo "repository_name=${{ env.name }}-${{ env.type }}-${{ inputs.environment }}" >> $GITHUB_OUTPUT

    - name: Create ecr if not exists
      uses: team-xquare/xquare-deployment-action/create-ecr@master
      with:
        repository_name: ${{ steps.repository.outputs.repository_name }}
        service_name: ${{ env.name }}
        service_type: ${{ env.type }}
        environment: ${{ inputs.environment }}
        github_token: ${{ inputs.github_token }}

    # Domain
    - name: Create domain if not exists
      if: ${{ env.domain }}
      uses: team-xquare/xquare-deployment-action/create-domain@master
      with:
        domain: ${{ env.domain }}

    # Docker
    - name: Get image tag
      id: tag
      shell: bash
      run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "version_tag=${{ inputs.environment }}-$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
          else
            echo "version_tag=${{ inputs.environment }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

    - name: Docker Build and push
      id: docker
      shell: bash
      run: |
        repo="${{ steps.ecr.outputs.registry }}/${{ steps.repository.outputs.repository_name }}:${{ steps.tag.outputs.version_tag }}"
        
        if [ -z "${{ inputs.buildargs }}" ]; then
          docker build -t "$repo" "${{ inputs.base_url }}"
        else
          BUILD_ARGS=""
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              BUILD_ARGS="$BUILD_ARGS --build-arg $line"
            fi
          done <<< "${{ inputs.buildargs }}"
          docker build -t "$repo" $BUILD_ARGS "${{ inputs.base_url }}"
        fi

        docker push $repo

    # GitOps
    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ inputs.github_token }}
        repository: team-xquare/xquare-gitops-repo
        event-type: update_config
        client-payload: |
          {
            "ref" : "${{ github.ref }}", 
            "image_tag" : "${{ steps.tag.outputs.version_tag }}",
            "service_name" : "${{ env.name }}",
            "service_prefix" : "${{ env.prefix }}",
            "service_domain" : "${{ env.domain }}",
            "service_type" : "${{ env.type }}",
            "environment" : "${{ inputs.environment }}"
          }
