name: 'Xquare deployment'
author: 'Xquare'
branding:
  icon: 'Xquare'
  color: 'Purple'

description: 'Tasks to deploy to xquare server'
inputs:
  environment:
    description: 'Environment classification for servers (prod/stag)' 
    required: true
  base_url:
    description: 'Base url of code'
    default: '.'
  config_file_path:
    description: 'Path of Xquare Config file'
    default: '.xquare/config.yaml'
  xquare_role_arn:
    description: 'Role arn to assume xquare credentials. If you want to distribute to Xquare, please contact administrator and check the value.'
    required: true
  github_token:
    description: 'Github personal access token to repository dispatch. It should has a `repo` scope. Detail on [Github Document](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)' 
    required: true
  buildargs:
    description: 'Use buildargs when you want to pass a list of environment variables to docker as build-args'

runs:
  using: 'composite'
  steps:
    - name: Install yq
      uses: mikefarah/yq@v4

    - name: Check config values
      id: check-config
      shell: bash
      env:
        GIT_REPO: ${{ github.repository }}
        TARGET_BRANCH: ${{ github.ref }}
        CONFIG_FILE_PATH: ${{ inputs.config_file_path }}
      run: |
        chmod +x $GITHUB_ACTION_PATH/check_config.sh
        $GITHUB_ACTION_PATH/check_config.sh

    - name: Read config file
      id: read-config
      shell: bash
      run: |
        config=$(cat ${{ inputs.config_file_path }})
        echo "service_name=$(yq eval ".config.name" <<< "$config")" >> $GITHUB_OUTPUT
        echo "service_prefix=$(yq eval ".config.prefix" <<< "$config")" >> $GITHUB_OUTPUT
        echo "service_domain=$(yq eval ".config.domain" <<< "$config")" >> $GITHUB_OUTPUT
        echo "service_type=$(yq eval ".config.service_type" <<< "$config")" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.xquare_role_arn }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ecr if not exists
      uses: team-xquare/xquare-deployment-action/create-ecr@master
      with:
        environment: ${{ inputs.environment }}
        github_token: ${{ inputs.github_token }}
        service_name: ${{ steps.read-config.outputs.service_name }}
        service_type: ${{ steps.read-config.outputs.service_type }}

    - name: Get image tag
      id: tag
      shell: bash
      run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "version_tag=${{ inputs.environment }}-$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
          else
            echo "version_tag=${{ inputs.environment }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

    - name: Docker Build and push
      id: docker
      shell: bash
      run: |
        repo="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ steps.tag.outputs.version_tag }}"
        if [ -z "${{ inputs.buildargs }}" ]; then
          docker build -t $repo ${{ inputs.base_url }}
        else
          BUILD_ARGS=""
          echo -e '${{ inputs.buildargs }}' | while IFS= read -r line; do
            BUILD_ARGS="$BUILD_ARGS --build-arg $line"
          done
          docker build -t $repo $BUILD_ARGS ${{ inputs.base_url }}
        fi

        docker push $repo

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ inputs.github_token }}
        repository: team-xquare/xquare-gitops-repo
        event-type: update_config
        client-payload: |
          {
            "ref" : "${{ github.ref }}", 
            "image_tag" : "${{ steps.tag.outputs.version_tag }}",
            "service_name" : "${{ steps.read-config.outputs.service_name }}",
            "service_prefix" : "${{ steps.read-config.outputs.service_prefix }}",
            "service_domain" : "${{ steps.read-config.outputs.service_domain }}",
            "service_type" : "${{ steps.read-config.outputs.service_type }}",
            "environment" : "${{ inputs.environment }}"
          }
